 
 ***  Settings Configuration in Django  *** 

(1)Configuring Django settings for database, static files, and API keys.
 - Configuring Django Settings for Database, Static Files, and API 
   Keys In Django, settings.py is the configuration file where various
   application parameters are defined, including settings for the database,
   static files, and API keys. Properly configuring these settings ensures
   that your application runs smoothly and securely. Here's an overview of 
   how to configure these aspects in a Django project.

 1.Configuring Database Settings
 - Django supports multiple databases, and the settings for connecting 
   to the database are defined under the DATABASES setting in settings.py.
   The configuration specifies the database engine, name, user, password, 
   and other related options.

-> Key Components:
 
  - ENGINE: The database backend (e.g., 'django.db.backends.postgresql', 
   'django.db.backends.sqlite3', 'django.db.backends.mysql').

  - NAME: The name of the database.

  - USER: The database user that Django will use to connect.

  - PASSWORD: The password for the database user.

  - HOST: The database host (can be localhost for local databases, or an 
    IP address/hostname for remote databases).
 
  - PORT: The port the database is running on (defaults vary depending on
    the database).

 2.Configuring Static Files
 - Static files are non-dynamic files used in web applications, such as
   CSS, JavaScript, and image files. Django handles static files through 
   a dedicated configuration that allows for serving and managing these 
   files during development and in production.

 -> Key Settings for Static Files:
  - STATIC_URL: The URL that serves static files in development. It's 
    typically set to /static/.

  - STATICFILES_DIRS: This defines the locations where Django will look
    for additional static files during development.

  - STATIC_ROOT: The absolute filesystem path where static files will 
    be collected when using python manage.py collectstatic in production.

  - STATICFILES_STORAGE: Configures how static files are stored and 
    served in production.

 3.Configuring API Keys
 - API keys are used to authenticate and access third-party services or 
   APIs. It's important to handle API keys securely to prevent accidental
   exposure.

 -> Storing API Keys:
  - API keys should never be hardcoded directly into the settings.py file
    or checked into version control (e.g., Git). Instead, they should be
    stored in environment variables or a separate configuration file that
    is excluded from version control (e.g., .env file).

  - The django-environ package is commonly used to manage environment 
    variables and secret settings.

  - Example Using django-environ:
 