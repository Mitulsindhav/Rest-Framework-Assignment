 
 ***   Requests and Responses in Django REST Framework *** 

(1)HTTP request methods (GET, POST, PUT, DELETE). 
 - HTTP (HyperText Transfer Protocol) defines a set of request methods 
   to indicate the desired action to be performed on a given resource.
   These methods form the foundation of RESTful web services and APIs.

 1.GET
 - Purpose: Retrieve data from the server.

 - Characteristics:

  - Safe (does not modify data).

  - Idempotent (repeated requests give the same result).

  - Parameters are usually sent in the URL (query string).

 - Example: Viewing a list of users or a specific item.

  - /api/users/ → fetch all users

  - /api/users/1/ → fetch user with ID 1

 2.POST
 - Purpose: Send data to the server to create a new resource.

 - Characteristics:

  - Not idempotent (repeated requests may create duplicates).

  - Data is sent in the request body (often JSON or form-encoded).

 - Example: Creating a new user.

  - /api/users/ with user data in body

 3.PUT
 - Purpose: Update an existing resource or create it if it does not exist.

 - Characteristics:

  - Idempotent (repeating the same request results in the same state).

  - Requires full data for the update.

 - Example: Replacing user data.

  - /api/users/1/ with updated user info in body

 4.DELETE
 - Purpose: Remove a resource from the server.

 - Characteristics:

  - Idempotent (deleting the same resource multiple times results in 
    the same state).

 - Example: Deleting a user.

  - /api/users/1/

(2)Sending and receiving responses in DRF. 
 - Django REST Framework (DRF) provides a structured way to handle HTTP
   requests and responses, especially when building APIs. Here's the 
   theory behind how responses are sent and received in DRF.

 1.Request and Response Cycle in DRF
 - When a client (e.g., browser, mobile app, or frontend JavaScript) 
   sends a request, DRF:

  - Receives the HTTP request.
 
  - Parses the request into a Request object.

  - The view processes the request.

  - A Response object is returned.

  - DRF converts it to a proper HTTP response (usually JSON).

 2.Receiving Requests
 - DRF wraps Django's standard HttpRequest with its own Request object, 
   which adds functionality like:

  - .data: Handles incoming JSON/form data.

  - .query_params: Access GET parameters.

  - .user: Authenticated user info.

  - .auth: Authentication credentials.

 3.Sending Responses
 - DRF provides a special Response class to return API responses. It 
   automatically:

  - Converts Python data to JSON/XML.

  - Sets the appropriate Content-Type.

  - Adds status codes.

 4.Why Use DRF’s Response Instead of Django’s HttpResponse?
 - DRF handles content negotiation (e.g., JSON, XML).

  - Automatically serializes Python objects.

  - Makes APIs consistent and standardized.

  - Integrates easily with authentication, permissions, and views.